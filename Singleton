// EJERCICIO 2: PATRÃ“N SINGLETON

//CÃ“DIGO INICIAL (PROBLEMA)
class AppConfigProblema {
    private String theme;
    private String language;
    
    public AppConfigProblema() {
        this.theme = "Dark";
        this.language = "ES";
        System.out.println(" ConfiguraciÃ³n creada: " + this);
    }
    
    public void setTheme(String theme) { this.theme = theme; }
    public void setLanguage(String language) { this.language = language; }
    public String getTheme() { return theme; }
    public String getLanguage() { return language; }
    
    @Override
    public String toString() {
        return String.format("AppConfig[theme=%s, language=%s]", theme, language);
    }
}

// SOLUCIÃ“N CON PATRÃ“N SINGLETON (Eager Initialization)
class AppConfig {
    // Paso 2: Instancia estÃ¡tica y privada (Eager Initialization)
    private static final AppConfig instance = new AppConfig();
    
    private String theme;
    private String language;
    
    // Paso 1: Constructor privado
    private AppConfig() {
        this.theme = "Dark";
        this.language = "ES";
        System.out.println("ðŸ”§ ConfiguraciÃ³n Singleton creada: " + this);
    }
    
    // Paso 3: MÃ©todo getter pÃºblico y estÃ¡tico
    public static AppConfig getInstance() {
        return instance;
    }
    
    public void setTheme(String theme) { this.theme = theme; }
    public void setLanguage(String language) { this.language = language; }
    public String getTheme() { return theme; }
    public String getLanguage() { return language; }
    
    @Override
    public String toString() {
        return String.format("AppConfig[theme=%s, language=%s]", theme, language);
    }
}

// CLASE PRINCIPAL - DEMOSTRACIÃ“N
public class Main {
    public static void main(String[] args) {
        System.out.println("=".repeat(60));
        System.out.println("EJERCICIO 1: PATRÃ“N PROTOTYPE");
        System.out.println("=".repeat(60));
        
        demoPrototypeProblema();
        System.out.println();
        demoPrototypeSolucion();
        
        System.out.println("\n" + "=".repeat(60));
        System.out.println("EJERCICIO 2: PATRÃ“N SINGLETON");
        System.out.println("=".repeat(60));
        
        demoSingletonProblema();
        System.out.println();
        demoSingletonSolucion();
    }
    
    //DEMOSTRACIÃ“N PROTOTYPE: PROBLEMA
    private static void demoPrototypeProblema() {
        System.out.println("\n SIN PATRÃ“N PROTOTYPE:");
        long inicio = System.currentTimeMillis();
        
        GraphicElementProblema button1 = new GraphicElementProblema(
            "StyledButton", 10, 20, "gradient-shadow"
        );
        
        GraphicElementProblema button2 = new GraphicElementProblema(
            "StyledButton", 40, 60, "gradient-shadow"
        );
        
        long fin = System.currentTimeMillis();
        System.out.println(" Tiempo total: " + (fin - inicio) + "ms");
    }
    
    //DEMOSTRACIÃ“N PROTOTYPE: SOLUCIÃ“N
    private static void demoPrototypeSolucion() {
        System.out.println("\n CON PATRÃ“N PROTOTYPE:");
        long inicio = System.currentTimeMillis();
        
        // Creamos el prototipo una sola vez (operaciÃ³n costosa)
        GraphicElement button1 = new GraphicElement(
            "StyledButton", 10, 20, "gradient-shadow"
        );
        
        // Uso del patrÃ³n segÃºn las instrucciones
        GraphicElement button2 = button1.clone(); // Â¡Ahora esto es muy rÃ¡pido!
        button2.setX(40);
        button2.setY(60);
        
        long fin = System.currentTimeMillis();
        System.out.println(" Tiempo total: " + (fin - inicio) + "ms");
        System.out.println(" Button1: " + button1);
        System.out.println(" Button2: " + button2);
    }
    
    //DEMOSTRACIÃ“N SINGLETON: PROBLEMA
    private static void demoSingletonProblema() {
        System.out.println("\n SIN PATRÃ“N SINGLETON:");
        
        AppConfigProblema config1 = new AppConfigProblema();
        config1.setTheme("Light");
        
        AppConfigProblema config2 = new AppConfigProblema();
        
        System.out.println("Config1: " + config1);
        System.out.println("Config2: " + config2);
        System.out.println("Â¿Son el mismo objeto? " + (config1 == config2));
        System.out.println(" Problema: MÃºltiples instancias con configuraciones inconsistentes!");
    }
    
    //DEMOSTRACIÃ“N SINGLETON: SOLUCIÃ“N
    private static void demoSingletonSolucion() {
        System.out.println("\n CON PATRÃ“N SINGLETON:");
        
        // Paso 4: Uso de getInstance() en lugar de new
        AppConfig config1 = AppConfig.getInstance();
        config1.setTheme("Light");
        
        AppConfig config2 = AppConfig.getInstance();
        
        System.out.println("Config1: " + config1);
        System.out.println("Config2: " + config2);
        System.out.println("Â¿Son el mismo objeto? " + (config1 == config2));
        System.out.println(" Ã‰xito: Una Ãºnica instancia compartida!");
    }
}
